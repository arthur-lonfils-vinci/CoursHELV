openapi: 3.0.0
paths:
  /auth/register:
    post:
      description: Create a new user account with email, password and role
      operationId: AuthController_register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: ''
      summary: Register a new user
      tags:
        - Auth
  /auth/login:
    post:
      description: Authenticate user and return access and refresh tokens
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: ''
      summary: User login
      tags:
        - Auth
  /auth/refresh:
    post:
      description: Generate new access token using refresh token
      operationId: AuthController_refresh
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenDto'
      responses:
        '200':
          description: ''
      summary: Refresh access token
      tags:
        - Auth
  /auth/logout:
    post:
      description: Invalidate user session and tokens
      operationId: AuthController_logout
      parameters:
        - name: Authorization
          required: true
          in: header
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenDto'
      responses:
        '200':
          description: ''
      summary: User logout
      tags:
        - Auth
info:
  title: Expoflow API
  description: API doc for the expoflow API
  version: '1.0'
  contact: {}
tags:
  - name: expoflow
    description: ''
servers: []
components:
  securitySchemes:
    JWT-auth:
      scheme: bearer
      bearerFormat: JWT
      type: http
      name: Authorization
      description: Enter JWT token
      in: header
  schemas:
    RegisterDto:
      type: object
      properties:
        email:
          type: string
          description: User email address for registration
          example: newuser@example.com
          format: email
        firstname:
          type: string
          description: User firstname for registration
          example: John
        lastname:
          type: string
          description: User lastname for registration
          example: Doe
        password:
          type: string
          description: >-
            User password - must contain uppercase, lowercase, number and
            special character
          example: SecurePassword123!
          minLength: 10
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
      required:
        - email
        - firstname
        - lastname
        - password
    LoginDto:
      type: object
      properties:
        email:
          type: string
          description: User email address
          example: user@example.com
          format: email
        password:
          type: string
          description: User password
          example: SecurePassword123!
          minLength: 8
        rememberMe:
          type: boolean
          description: Whether to remember the user session
          example: true
          default: false
      required:
        - email
        - password
        - rememberMe
    RefreshTokenDto:
      type: object
      properties:
        refresh_token:
          type: string
          description: JWT refresh token for obtaining a new access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - refresh_token
